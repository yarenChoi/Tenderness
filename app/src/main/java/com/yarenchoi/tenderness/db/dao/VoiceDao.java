package com.yarenchoi.tenderness.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yarenchoi.tenderness.db.entity.Voice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VOICE".
*/
public class VoiceDao extends AbstractDao<Voice, Long> {

    public static final String TABLENAME = "VOICE";

    /**
     * Properties of entity Voice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property VoiceUrl = new Property(1, String.class, "voiceUrl", false, "VOICE_URL");
        public final static Property Len = new Property(2, float.class, "len", false, "LEN");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Date = new Property(4, java.util.Date.class, "date", false, "DATE");
    }


    public VoiceDao(DaoConfig config) {
        super(config);
    }
    
    public VoiceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VOICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"VOICE_URL\" TEXT NOT NULL ," + // 1: voiceUrl
                "\"LEN\" REAL NOT NULL ," + // 2: len
                "\"TITLE\" TEXT," + // 3: title
                "\"DATE\" INTEGER NOT NULL );"); // 4: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VOICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Voice entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getVoiceUrl());
        stmt.bindDouble(3, entity.getLen());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
        stmt.bindLong(5, entity.getDate().getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Voice entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getVoiceUrl());
        stmt.bindDouble(3, entity.getLen());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
        stmt.bindLong(5, entity.getDate().getTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Voice readEntity(Cursor cursor, int offset) {
        Voice entity = new Voice( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // voiceUrl
            cursor.getFloat(offset + 2), // len
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            new java.util.Date(cursor.getLong(offset + 4)) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Voice entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVoiceUrl(cursor.getString(offset + 1));
        entity.setLen(cursor.getFloat(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Voice entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Voice entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Voice entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
